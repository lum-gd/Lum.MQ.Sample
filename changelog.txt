对代码做了重新命名，整体简称LumQ。
简单整理了两张图，一张关于MQ的思维导图，一张项目实现架构图
代码仍在开发阶段，所以与架构图并不完全匹配。这种未完成的代码，反而是大家参与其中的机会，是新手练习的好材料。

---------------------------------------------

本次把所有项目升级为.net 6，并加入了对Rabbit的实现，独立出来了不同底层共有的部分Lum.MQ.Core，也就是使用DataFlow的核心代码。
本项目的目的并不挖掘不同MQ的特有功能，而是着重在MQ基础功能，提供简单一致的调用套路。对于一些要用到特有功能的需求，可以继承本项目的接口与实现进行扩展。
本次还加入了Worker类型的消费者。
本次有部分更改在Deepin系统上进行，个人认为Deepin的体验已经超过Win10，推荐程序员试用，企业用户可以用更稳定的UOS。
Rabbit可以用Docker运行：docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq

---------------------------------------------

# Lum.MQ.Sample
对消息队列的.net抽象，及基于Solace的实现

Solace是基于硬件的消息队列，想必是一种有极高性能的设备，基于兴趣我对Solace官方库做了进一步封装，实现更方便的对接asp.net，这是第一版，可以改进的地方有：
1。把发送与接收分开，因为经常有单独发送或接收的用法，既发送又接收的情况是少数的，分开后还能降低类的依赖强度
2。双向的即有返回值的发送，使用Solace官方库时，并发能力不太足，可以改为使用临时队列作为返回通道来实现更高的并发能力
3。还没有单元测试，只是在Sample项目里有随便写的压力测试代码

设计简介
0。所有设计相关的内容主要在interface的定义里，可以按先抽象后实现的顺序阅读代码，理解实现
1。抽象部分的意图是能适应不同的底层消息队列实现，屏蔽调用细节，形成一套固定的调用模式，实现Client代码不用动，就能替换底层消息队列的实现。
2。实现部分是用Solace实现我的抽象，并提供对asp.net的AddxxxService和UsexxxService的便捷配置
3。实现的核心在于充分使用DataFlow，利用其天然提供的流量控制与并发控制，降低对具体消息队列细节的依赖
流量控制是我的一个关注点，虽然Solace或其它消息队列可能也会提供流量控制手段，但使用时需要阅读其文档，找到各自的配置方法，而使用DataFlow就可以消除对这种具体设施细节的依赖，实现更强的适配能力
有些人会使用了Rx.net来处理消息，但我认为Rx.net因缺少流控能力，所以更适合处理单用户低频事件，DataFlow是更合适的消息处理工具
