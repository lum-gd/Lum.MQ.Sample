本次把所有项目升级为.net 6，并加入了对Rabbit的实现，独立出来了不同底层共有的部分Lumin.MQ.Core，也就是使用DataFlow的核心代码。
本项目的目的并不挖掘不同MQ的特有功能，而是着重在MQ基础功能，提供简单一致的调用套路。对于一些要用到特有功能的需求，可以继承本项目的接口与实现进行扩展。
本次还加入了Worker类型的消费者。
本次有部分更改在Deepin系统上进行，个人认为Deepin的体验已经超过Windows，推荐程序员试用，企业用户可以用更稳定的UOS。
Rabbit可以用Docker运行：docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq

---------------------------------------------

# Lumin.MQ.Sample
对消息队列的.net抽象，及基于Solace的实现

Solace是基于硬件的消息队列，想必是一种h侑极高性能的设备，基于兴趣我对Solace官方库做了进一步封装，实现更方便的对接asp.net，这是第一版，可以改进的地方有：
1。把发送与接收分开，因为经常有单独发送或接收的用法，即发送又接收的情况是少数的，分开后还能降低实现的类的大小，及依赖强度
2。双向的即有返回值的发送，使用Solace官方库时，并发能力不太足，可以改为使用临时队列作为返回通道来实现更高的并发能力
3。还没有单元测试，只是在Sample项目里有随便写的压力测试代码

设计简介
0。所有设计相关的内容主要在interface的定义里，可以按先抽象后实现的顺序阅读代码，理解实现
1。抽象部分的意图是能适应不同的底层消息队列实现，屏蔽调用细节，形成一套固定的调用模式，实现Client代码不用动，就能替换底层消息队列的实现。
但我并不是对消息队列有丰富经验的人，也许有更好的写法，目前只是我自己对消息队列用法的想象
2。实现部分是用Solace实现我的想象，并提供对asp.net的AddxxxService和UsexxxService的便捷配置
3。实现的核心在于充分使用DataFlow，利用其天然提供的流量控制与并发控制，降低对具体消息队列细节的依赖
比如Solace自己提供了流量控制，但使用时需要阅读其文档，找到配置的方法，而使用DataFlow就可以消除对这种具体设备细节的依赖，实现更强的适配能力
与Rx.net相比，我觉得DataFlow是更适合的消息队列封装工具，Rx.net因缺少流控能力，所以我觉得它可能更适合处理低频事件
